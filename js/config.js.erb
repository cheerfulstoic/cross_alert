<%
    require 'time'
    require 'csv'

    colors = %w[
      F44336
      E91E63
      9C27B0
      673AB7
      3F51B5
      2196F3
      009688
      8BC3A4
      CDDC39
      FFEB3B
      FFC107
      FF9800
      FF5722
      795548
    ]

datetimes = terms.flat_map do |name|
  path = "#{name}.json.csv"
  rows = CSV.parse(File.read(path))

  rows.map do |row|
    DateTime.parse(row[2]).strftime("%Y-%m-%d 00:00")
  end
end.uniq.sort.map {|d| "'#{d}'" }
%>

let currentXLabelDateTime = null

window.config = {
  type: 'line',
  data: {
    // labels: [<%= datetimes.join(',') %>],
    datasets: [
      <% terms.each_with_index do |name, index| %>
        <%
          name = name.gsub(' ', '-')
        %>
        {
          label: <%= name.inspect %>,
          fill: '#<%= colors[index] %>',
          data: [
              <%
                path = "#{name}.json.csv"
                data = CSV.parse(File.read(path))
                grouped_data = data.group_by do |row|
                  DateTime.parse(row[2]).strftime("%Y-%m-%d %H:00")
                end

                hour_counts = grouped_data.each_with_object({}) do |(hour_string, array), result|
                  result[hour_string] = array.size
                end
              %>

              <%=
                hour_counts.map do |hour_string, count|
                  "{ x: moment(#{hour_string.inspect}), y: #{count}, color: '##{colors[index]}'}"
                end.join(',')
              %>
          ],
        },
      <% end %>
    ]
  },
  options: {
    legend: {
     display: false
    },
    onClick: function (context, elements) {
      // debugger
      // let element = elements[0];
      console.log(elements.forEach(function (element) {
        let datasetTmp = myLine.data.datasets[element._datasetIndex];
        console.log(datasetTmp.label);
      }));
      // let element = myLine.getElementsAtEventForMode(context, 'x', 1)[0]
      // let element = myLine.getElementsAtXAxis(context)[0]
      let element = myLine.getElementAtEvent(context)[0];
      let dataset = myLine.data.datasets[element._datasetIndex]
      let label = dataset.label;
      let date = dataset.data[element._index].x;

      console.log(label);
      console.log(date.format("YYYYMMDDHH00"));
      window.displayTweets(label, date.format("YYYYMMDDHH00"));
    },
    elements: {
      point: {
        backgroundColor: function (context) {
          let data = context.dataset.data[context.dataIndex]
          if (data.y > 30) {
            return(data.color)
          } else {
            return('#CCCCCC')
          }
        },
      },
    },
    title: {
      text: 'Chart.js Time Scale'
    },
    scales: {
      xAxes: [{
        type: 'time',
        ticks: {
          major: {
            enabled: true,
            fontStyle: 'bold'
          },
          callback: function(value, index, values) {
            let newXLabelDateTime = moment(values[index].value).format("YYYY-MM-DD");

            if (newXLabelDateTime != currentXLabelDateTime) {
              currentXLabelDateTime = newXLabelDateTime;
              return(currentXLabelDateTime);
            }
          }
        },
        time: {
          parser: 'MM/DD/YYYY HH:mm',
          // round: 'day',
          tooltipFormat: 'll HH:mm'
        },
        scaleLabel: {
          display: true,
          labelString: 'Datum'
        }
      }],
      yAxes: [{
        scaleLabel: {
          display: true,
          labelString: 'Tweets per timme'
        }
      }]
    },
  }
};
